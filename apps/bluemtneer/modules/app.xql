xquery version "3.0";

module namespace app="urn:PUL:bluemountain:apps:bluemtneer/templates";
declare namespace mods="http://www.loc.gov/mods/v3";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://exist-db.org/xquery/apps/config" at "config.xqm" ;

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with a class attribute: class="app:test". The function
 : has to take exactly 3 parameters.
 : 
 : @param $node the HTML node with the class attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the class attribute <code>class="app:test"</code>.</p>
};

declare function app:helloworld($node as node(), $model as map(*), $name as xs:string?) {
    if ($name) then
        <p>Hello {$name}!</p>
    else
        ()
};

declare function app:catEntry($node as node(), $model as map(*), $bmtnid as xs:string?) {
    let $entry :=
        if ($bmtnid) then
            collection($config:data-root)/mods:mods[./mods:identifier = "urn:PUL:bluemountain:" || $bmtnid]
        else
            ()
    return map:entry("title", $entry)
};

(: BUG: the collection() expression should be replace with
 : $config:data-root || "/mods:mods" but $config:data-root
 : causes a "prefix not found" error. :)

(:~
 : This function puts title-level MODS into the Model.
 : There is a bug here
 : @param $node the HTML node with the class attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare
    %templates:wrap
function app:titles($node as node(), $model as map(*)) as map(*) {
    let $titleSet :=
        for $rec in collection($config:data-root)/mods:mods
        where empty($rec/mods:relatedItem[@type='host'])
        order by upper-case($rec/mods:titleInfo[empty(@type)]/mods:title/string())
        return $rec
    return map { "titles" := $titleSet }
};

declare
    %templates:wrap
function app:print-title($node as node(), $model as map(*)) {
    let $titleInfo := $model("title")/mods:titleInfo[empty(@type)]
    let $tstring :=
        if ($titleInfo/mods:nonSort)
        then concat($titleInfo/mods:nonSort/string(), " ")
        else ""
    let $tstring := $tstring || $titleInfo/mods:title/string()
    return $tstring 
};

declare 
    %templates:wrap 
function app:print-identifier($node as node(), $model as map(*)) {
    let $bmtnid := substring-after($model("title")/mods:identifier/string(), 'urn:PUL:bluemountain:')
    let $href := "catalog.html?bmtnid=" || $bmtnid
    return
        <a href="{$href}">
         { $bmtnid }
        </a>
};

declare 
    %templates:wrap 
function app:print-bbid($node as node(), $model as map(*)) {
    let $bbid := substring-after($model("title")//mods:recordOrigin/string(), "BBID=")
    let $prefix := "http://diglib.princeton.edu/tools/ib/pudl0097/"
    return <a href="{$prefix || $bbid}">{ $bbid }</a>
};